// Code generated by "stringer -type=TOKEN_TYPE -trimprefix=T_"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[T_UNKNOWN-0]
	_ = x[T_IDENT-1]
	_ = x[T_NUMBER-2]
	_ = x[T_STRING-3]
	_ = x[T_DOT-4]
	_ = x[T_SEMICOLON-5]
	_ = x[T_COMMA-6]
	_ = x[T_QUESTION-7]
	_ = x[T_COLON-8]
	_ = x[T_EXCLAM-9]
	_ = x[T_ACC_LIST-10]
	_ = x[T_ACC_MAP-11]
	_ = x[T_ACC_GRID-12]
	_ = x[T_ACC_ARRAY-13]
	_ = x[T_ACC_STRUCT-14]
	_ = x[T_LPAREN-15]
	_ = x[T_RPAREN-16]
	_ = x[T_LSQUARE-17]
	_ = x[T_RSQUARE-18]
	_ = x[T_LCURLY-19]
	_ = x[T_RCURLY-20]
	_ = x[T_LEQ-21]
	_ = x[T_GEQ-22]
	_ = x[T_EQ-23]
	_ = x[T_NEQ-24]
	_ = x[T_LESS-25]
	_ = x[T_MORE-26]
	_ = x[T_PLUS-27]
	_ = x[T_MINUS-28]
	_ = x[T_DIV-29]
	_ = x[T_INTDIV-30]
	_ = x[T_MUL-31]
	_ = x[T_MOD-32]
	_ = x[T_OR-33]
	_ = x[T_AND-34]
	_ = x[T_NULLISH-35]
	_ = x[T_BITOR-36]
	_ = x[T_BITAND-37]
	_ = x[T_BITNOT-38]
	_ = x[T_BITXOR-39]
	_ = x[T_LSHIFT-40]
	_ = x[T_RSHIFT-41]
	_ = x[T_ASSIGN-42]
	_ = x[T_ASSIGN_ADD-43]
	_ = x[T_ASSIGN_SUB-44]
	_ = x[T_ASSIGN_MUL-45]
	_ = x[T_ASSIGN_DIV-46]
	_ = x[T_ASSIGN_NULLISH-47]
	_ = x[T_DECREMENT-48]
	_ = x[T_INCREMENT-49]
	_ = x[T_HASH-50]
	_ = x[T_BACKSLASH-51]
	_ = x[T_NEWLINE-52]
	_ = x[T_EOF-53]
}

const _TOKEN_TYPE_name = "UNKNOWNIDENTNUMBERSTRINGDOTSEMICOLONCOMMAQUESTIONCOLONEXCLAMACC_LISTACC_MAPACC_GRIDACC_ARRAYACC_STRUCTLPARENRPARENLSQUARERSQUARELCURLYRCURLYLEQGEQEQNEQLESSMOREPLUSMINUSDIVINTDIVMULMODORANDNULLISHBITORBITANDBITNOTBITXORLSHIFTRSHIFTASSIGNASSIGN_ADDASSIGN_SUBASSIGN_MULASSIGN_DIVASSIGN_NULLISHDECREMENTINCREMENTHASHBACKSLASHNEWLINEEOF"

var _TOKEN_TYPE_index = [...]uint16{0, 7, 12, 18, 24, 27, 36, 41, 49, 54, 60, 68, 75, 83, 92, 102, 108, 114, 121, 128, 134, 140, 143, 146, 148, 151, 155, 159, 163, 168, 171, 177, 180, 183, 185, 188, 195, 200, 206, 212, 218, 224, 230, 236, 246, 256, 266, 276, 290, 299, 308, 312, 321, 328, 331}

func (i TOKEN_TYPE) String() string {
	if i < 0 || i >= TOKEN_TYPE(len(_TOKEN_TYPE_index)-1) {
		return "TOKEN_TYPE(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TOKEN_TYPE_name[_TOKEN_TYPE_index[i]:_TOKEN_TYPE_index[i+1]]
}
