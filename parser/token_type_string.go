// Code generated by "stringer -type=TOKEN_TYPE"; DO NOT EDIT.

package parser

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[T_UNKNOWN-0]
	_ = x[T_IDENT-1]
	_ = x[T_NUMBER-2]
	_ = x[T_STRING-3]
	_ = x[T_DOT-4]
	_ = x[T_SEMICOLON-5]
	_ = x[T_COMMA-6]
	_ = x[T_LPAREN-7]
	_ = x[T_RPAREN-8]
	_ = x[T_LSQUARE-9]
	_ = x[T_RSQUARE-10]
	_ = x[T_LCURLY-11]
	_ = x[T_RCURLY-12]
	_ = x[T_LEQ-13]
	_ = x[T_GEQ-14]
	_ = x[T_EQ-15]
	_ = x[T_LESS-16]
	_ = x[T_MORE-17]
	_ = x[T_PLUS-18]
	_ = x[T_MINUS-19]
	_ = x[T_DIV-20]
	_ = x[T_MUL-21]
	_ = x[T_OR-22]
	_ = x[T_AND-23]
	_ = x[T_ASSIGN-24]
}

const _TOKEN_TYPE_name = "T_UNKNOWNT_IDENTT_NUMBERT_STRINGT_DOTT_SEMICOLONT_COMMAT_LPARENT_RPARENT_LSQUARET_RSQUARET_LCURLYT_RCURLYT_LEQT_GEQT_EQT_LESST_MORET_PLUST_MINUST_DIVT_MULT_ORT_ANDT_ASSIGN"

var _TOKEN_TYPE_index = [...]uint8{0, 9, 16, 24, 32, 37, 48, 55, 63, 71, 80, 89, 97, 105, 110, 115, 119, 125, 131, 137, 144, 149, 154, 158, 163, 171}

func (i TOKEN_TYPE) String() string {
	if i < 0 || i >= TOKEN_TYPE(len(_TOKEN_TYPE_index)-1) {
		return "TOKEN_TYPE(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TOKEN_TYPE_name[_TOKEN_TYPE_index[i]:_TOKEN_TYPE_index[i+1]]
}
